<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Y.-Y. Wang&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangyuyang.me/"/>
  <updated>2019-01-19T12:42:01.704Z</updated>
  <id>http://wangyuyang.me/</id>
  
  <author>
    <name>Y.-Y. Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模拟登录HFUT信息门户</title>
    <link href="http://wangyuyang.me/2019/01/19/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95HFUT%E4%BF%A1%E6%81%AF%E9%97%A8%E6%88%B7/"/>
    <id>http://wangyuyang.me/2019/01/19/模拟登录HFUT信息门户/</id>
    <published>2019-01-19T12:11:45.000Z</published>
    <updated>2019-01-19T12:42:01.704Z</updated>
    
    <content type="html"><![CDATA[<h2 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h2><p>首先用Chrome的开发者模式来看一看登录过程，切换Tab到Network页，注意勾选Preserve log，保证登录成功跳转页面后记录不会被清除，然后输入账号、密码和验证码开始登陆。<br><a id="more"></a><br>可以看到整个登录过程还是很清晰的，点击登录按钮后，浏览器首先向’userPasswordValidate.portal’提交了了一个Form Data:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Login.Token1: 2019123456</span><br><span class="line">Login.Token2: 123456</span><br><span class="line">captchaField: abcd</span><br><span class="line">goto: http://my.hfut.edu.cn/loginSuccess.portal</span><br><span class="line">gotoOnFail: http://my.hfut.edu.cn/loginFailure.portal</span><br></pre></td></tr></table></figure></p><p>显然Login.Token1是登录账号，Token2为密码，captchaField为验证码，只需将信息填入dict，再用post命令提交到相应网址即可。</p><p>需要稍微留意的是验证码网址的抓取，讲道理这一步浪费了我不少时间。审查元素可以看到验证码地址：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"captchaImg"</span> <span class="attr">src</span>=<span class="string">"captchaGenerate.portal?s=0.7016079522553234"</span> <span class="attr">width</span>=<span class="string">"52"</span> <span class="attr">height</span>=<span class="string">"25"</span> <span class="attr">align</span>=<span class="string">"absmiddle"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>‘captchaGenerate.portal?s=’后有一个随机的参数，每一次刷新页面可以发现参数都会改变，一开始我猜测，这个参数是服务器根据访问者cookies生成的，因此我最初的思路是用re.findall()命令配合正则表达式从网页源码中爬出来，结果发现信息门户主页面居然是动态加载的，只好另外寻找方法（说白了还是太菜hhh</p><p>在寻找方法的过程，注意到portal-login.js中有这样一段代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reloadCaptcha</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    cImg.src = <span class="string">"captchaGenerate.portal?s="</span> + <span class="built_in">Math</span>.random()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cImg肯定就是指captchaImg了，然后……他喵的这个小数居然是在本地调用’random()’函数随机生成的？！那岂不是我随便输一个小数就行了？？？老子还废了半天劲去学Selenium…</p><p>然后试了一下随便输一个0~1之间的小数作为验证码url参数，人肉识别验证码，print一下页面，确实成功登录进了教务系统~</p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录认证地址</span></span><br><span class="line">login_url = <span class="string">'http://my.hfut.edu.cn/userPasswordValidate.portal'</span></span><br><span class="line"><span class="comment"># 验证码地址,随便输一个参数</span></span><br><span class="line">captchaImg_url = <span class="string">'http://my.hfut.edu.cn/captchaGenerate.portal?s=0.5105653379102382'</span></span><br><span class="line"><span class="comment"># 信息门户主界面 &amp; 主登录页</span></span><br><span class="line">login1_url = <span class="string">'http://my.hfut.edu.cn/'</span></span><br><span class="line"></span><br><span class="line">UA = <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">          <span class="string">'User-Agent'</span>: UA ,</span><br><span class="line">          <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过requests.Session管理cookies，同一个Session实例发出的所有请求都保持同一个cookies</span></span><br><span class="line">jwxt_session = requests.session()</span><br><span class="line">response1 = jwxt_session.get(url=login1_url, headers=headers)</span><br><span class="line">response1.encoding = <span class="string">'utf-8'</span></span><br><span class="line">login1_text = response1.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码的获取和保存</span></span><br><span class="line">captcha = jwxt_session.get(captchaImg_url)</span><br><span class="line">f = open(<span class="string">'captcha.png'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="comment"># 将response的二进制内容写入到文件中</span></span><br><span class="line">f.write(captcha.content)</span><br><span class="line"><span class="comment"># 关闭文件流对象</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">form_data = &#123;</span><br><span class="line">             <span class="string">'captchaField'</span>: <span class="string">''</span>, </span><br><span class="line">             <span class="string">'Login.Token1'</span>: <span class="string">'2017210103'</span>, </span><br><span class="line">             <span class="string">'Login.Token2'</span>: <span class="string">'r7BQRrs6L'</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人工输入验证码，后期再改为机器识别</span></span><br><span class="line">code = input(<span class="string">'请输入验证码：'</span>)</span><br><span class="line">form_data[<span class="string">'captchaField'</span>] = str(code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交数据</span></span><br><span class="line">s = jwxt_session.post(login_url, data=form_data, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次访问信息门户并写入文件，判断是否成功登录</span></span><br><span class="line">s = jwxt_session.get(login1_url)</span><br><span class="line">s.text</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(s.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;具体思路&quot;&gt;&lt;a href=&quot;#具体思路&quot; class=&quot;headerlink&quot; title=&quot;具体思路&quot;&gt;&lt;/a&gt;具体思路&lt;/h2&gt;&lt;p&gt;首先用Chrome的开发者模式来看一看登录过程，切换Tab到Network页，注意勾选Preserve log，保证登录成功跳转页面后记录不会被清除，然后输入账号、密码和验证码开始登陆。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Arduino Q&amp;A</title>
    <link href="http://wangyuyang.me/2018/08/08/Arduino-Q&amp;A/"/>
    <id>http://wangyuyang.me/2018/08/08/Arduino-Q&amp;A/</id>
    <published>2018-08-08T12:38:52.000Z</published>
    <updated>2018-08-08T13:05:43.110Z</updated>
    
    <content type="html"><![CDATA[<p>Q：为什么Arduino代码中没有main函数？如何在项目中使用多个文件？<br>A：参见<a href="https://www.cnblogs.com/lulipro/p/6090407.html5" target="_blank" rel="noopener">「如何编写自己的Arduino库？」</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Q：为什么Arduino代码中没有main函数？如何在项目中使用多个文件？&lt;br&gt;A：参见&lt;a href=&quot;https://www.cnblogs.com/lulipro/p/6090407.html5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;「如何
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>对Python中class的理解</title>
    <link href="http://wangyuyang.me/2018/06/10/%E5%AF%B9Python%E4%B8%ADclass%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://wangyuyang.me/2018/06/10/对Python中class的理解/</id>
    <published>2018-06-10T11:38:48.000Z</published>
    <updated>2018-06-10T12:30:21.228Z</updated>
    
    <content type="html"><![CDATA[<p>初学，浅薄的见解。</p><p>假设有一家宠物店养了十几只狗，为了便于管理，决定把狗的信息录入计算机中。<br>录入信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name: Adam</span><br><span class="line">age: 1</span><br><span class="line">color: white</span><br><span class="line"></span><br><span class="line">name: Barry</span><br><span class="line">age: 3</span><br><span class="line">color: black</span><br><span class="line"></span><br><span class="line">name: Carl</span><br><span class="line">age: 6</span><br><span class="line">color: grey</span><br></pre></td></tr></table></figure></p><p>在录入信息的开始，你可能并不觉得麻烦。但随着狗的数量增加，你发现你有一半的时间都在重复输入这些东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name:</span><br><span class="line">age:</span><br><span class="line">color:</span><br></pre></td></tr></table></figure><p>你所做的一切无非就是套用这个模板，把每一条狗的<code>name, age, color</code>等属性(properties)的值(如white, black等)输进去而已。既然如此，完全可以先将模板输入计算机。然后在需要时，用一个语句调用模板，然后根据需要为每个属性赋值即可。</p><p>再来重新回顾一下上面这一过程：首先，Adam, Berry, Carl等都是狗这一种生物，即它们都是属于同一类(class)的，我们不妨给这个<code>类</code>一个名字，称之为：<code>Dog</code>。每一只狗，如Adam,Berry都是<code>Dog</code>这一类别下的实际的例子,我们称之为实例。即Adam, Berry, Carl等都是Dog类的实例。</p><p>具体到每一只狗而言，Adam是<code>Dog</code>类所描述的一个对象，Berry也是一个对象，Carl也是。</p><p>概括一下，对象是类的实例，基于类来创建每一个对象的过程被称为实例化。</p><p>在Python中，这样进行描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""先创建一个Dog类"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, color)</span>:</span></span><br><span class="line">        <span class="string">"""定义类具有的属性"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line"><span class="string">"""根据类创建实例"""</span></span><br><span class="line">first_dog = Dog(<span class="string">'Adam'</span>, <span class="number">1</span>, <span class="string">'white'</span>)</span><br><span class="line">second_dog = Dog(<span class="string">'Berry'</span>, <span class="number">3</span>, <span class="string">'black'</span>)</span><br></pre></td></tr></table></figure><p>你可能会觉得这样做并没有使问题得到简化，下面的语句并没有让录入信息变得更加简单，甚至还麻烦不少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_dog = Dog(<span class="string">'Adam'</span>, <span class="number">1</span>, <span class="string">'white'</span>)</span><br></pre></td></tr></table></figure><p>客观来说，对于宠物店这个例子来说，使用类的概念确实没有简化问题。但对于某些情况则未必，例如，假如某一宠物店的宠物狗都是黑色的，今年全都是两岁，那么我们可以在创建类的时候给予age, color属性一个初始值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""先创建一个Dog类"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""定义类具有的属性"""</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = <span class="number">2</span>        //初始值为 <span class="number">2</span></span><br><span class="line">        self.color = black  //初始值为 black</span><br><span class="line"></span><br><span class="line"><span class="string">"""根据类创建实例"""</span></span><br><span class="line">first_dog = Dog(<span class="string">'Adam'</span>)</span><br><span class="line">second_dog = Dog(<span class="string">'Berry'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初学，浅薄的见解。&lt;/p&gt;
&lt;p&gt;假设有一家宠物店养了十几只狗，为了便于管理，决定把狗的信息录入计算机中。&lt;br&gt;录入信息如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 学习笔记</title>
    <link href="http://wangyuyang.me/2018/05/30/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangyuyang.me/2018/05/30/Python-学习笔记/</id>
    <published>2018-05-30T05:35:10.000Z</published>
    <updated>2018-05-31T14:52:47.012Z</updated>
    
    <content type="html"><![CDATA[<p>小白，初学。</p><h2 id="Visual-Studio-Code-配置-Python-开发环境"><a href="#Visual-Studio-Code-配置-Python-开发环境" class="headerlink" title="Visual Studio Code 配置 Python 开发环境"></a>Visual Studio Code 配置 Python 开发环境</h2><p>可参考：<br><a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="noopener">Python in Visual Studio Code</a><br><a href="https://bespohk.com/blog/configuring-python-visual-studio-code" target="_blank" rel="noopener">Improving your Python workflow with Visual Studio Code</a><br><a id="more"></a> </p><h2 id="init"><a href="#init" class="headerlink" title="init"></a><strong>init</strong></h2><p>方法<code>__init__</code>中共有四个下划线而不是两个！</p><h2 id="对象、类-class-与实例-instance"><a href="#对象、类-class-与实例-instance" class="headerlink" title="对象、类(class)与实例(instance)"></a>对象、类(class)与实例(instance)</h2><p>对象是类的实例<br>实例是根据类创建出来的一个个具体的对象</p><h2 id="Python-编程-从入门到实践-一书的资源"><a href="#Python-编程-从入门到实践-一书的资源" class="headerlink" title="Python 编程 从入门到实践 一书的资源"></a>Python 编程 从入门到实践 一书的资源</h2><p>可以在<a href="https://nostarch.com/pythoncrashcourse" target="_blank" rel="noopener">这里</a>或者<a href="http://www.ituring.com.cn/book/1861" target="_blank" rel="noopener">这里（中文）</a>找到随书资源及错误修正。</p><h2 id="使用-Pygame-创作一个小游戏"><a href="#使用-Pygame-创作一个小游戏" class="headerlink" title="使用 Pygame 创作一个小游戏"></a>使用 Pygame 创作一个小游戏</h2><p>Pygame下载地址及官方文档：<a href="https://www.pygame.org" target="_blank" rel="noopener">戳这里</a></p><h2 id="有用的资料"><a href="#有用的资料" class="headerlink" title="有用的资料"></a>有用的资料</h2><p>廖雪峰的中文教程:<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python教程</a><br>英文官方文档：<a href="https://www.python.org/doc/" target="_blank" rel="noopener">Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小白，初学。&lt;/p&gt;
&lt;h2 id=&quot;Visual-Studio-Code-配置-Python-开发环境&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code-配置-Python-开发环境&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code 配置 Python 开发环境&quot;&gt;&lt;/a&gt;Visual Studio Code 配置 Python 开发环境&lt;/h2&gt;&lt;p&gt;可参考：&lt;br&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/languages/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python in Visual Studio Code&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://bespohk.com/blog/configuring-python-visual-studio-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Improving your Python workflow with Visual Studio Code&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C 学习笔记</title>
    <link href="http://wangyuyang.me/2018/05/26/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangyuyang.me/2018/05/26/C-学习笔记/</id>
    <published>2018-05-26T12:56:16.000Z</published>
    <updated>2018-06-07T12:54:33.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对于浮点数不宜使用-或-运算符"><a href="#对于浮点数不宜使用-或-运算符" class="headerlink" title="对于浮点数不宜使用 == 或 != 运算符"></a>对于浮点数不宜使用 == 或 != 运算符</h2><p>写作业时遇到了一个奇怪的bug，精简一下，代码大致如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">-5</span>;</span><br><span class="line">    </span><br><span class="line">    x = x + <span class="number">0.1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">-4.9</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><a id="more"></a> <p>执行如上语句后，发现语句<code>printf(&quot;\n&quot;);</code>并未执行.换句话说，if后表达式的值为false.</p><p>这个结果就有点让人感到困惑了，显然当程序执行完第四行后，x的值应当为1.1，为何表达式<code>x == 1.1</code>的值为0？打开Visual Studio的调试功能才发现问题所在：执行完第四行后x的值并不是-4.900…000，而是-4.900…007，确实不等于-4.9.</p><p>发现问题之后便查了一下资料，才知道这一bug的产生原因：IEEE 754-1985标准中规定浮点数在计算机中以二进制形式储存，因此在转换为十进制时会产生截断误差，也就是说<code>float</code>和<code>double</code>型变量都有精度限制，当使用<code>==</code>或<code>!=</code>进行判断时，必须保证运算符两边的值均为字面量而非计算量，否则大概率会出现问题.</p><p>参考资料&amp;扩展阅读：<br> <a href="https://www.zhihu.com/question/21175703" target="_blank" rel="noopener">有没有使用“==”判断浮点数相等与否出现错误的例子？</a><br> <a href="http://justjavac.com/codepuzzle/2012/11/11/codepuzzle-float-who-stole-your-accuracy.html" target="_blank" rel="noopener">代码之谜（五）- 浮点数（谁偷了你的精度？）</a></p><hr><h2 id="关于二维数组的一些问题"><a href="#关于二维数组的一些问题" class="headerlink" title="关于二维数组的一些问题"></a>关于二维数组的一些问题</h2><p>见<a href="https://blog.csdn.net/u012938194/article/details/50526198" target="_blank" rel="noopener">这里</a></p><hr><h2 id="自定义标识符"><a href="#自定义标识符" class="headerlink" title="自定义标识符"></a>自定义标识符</h2><p>有这样一道题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下列标识符中，不合法的C语言用户自定义标识符是（）。</span><br><span class="line">    A:printf</span><br><span class="line">    B:enum</span><br><span class="line">    C:_</span><br><span class="line">    D:sin</span><br></pre></td></tr></table></figure></p><p>答案选B<br>printf实际可以是自定义标识符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以下标识符中，不能作为合法的C用户定义标识符的是（）。</span><br><span class="line">    A:putchar</span><br><span class="line">    B:_double</span><br><span class="line">    C:_123</span><br><span class="line">    D:INT</span><br></pre></td></tr></table></figure><p>答案选A<br>Are you kidding me?</p><hr><h2 id="实参与形参"><a href="#实参与形参" class="headerlink" title="实参与形参"></a>实参与形参</h2><p>实参数组类型与形参数组类型可以不匹配</p><hr><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>学校考试按如下标准：<br>16位编译器</p><p>char ：1个字节<br>char*(即指针变量): 2个字节<br>short int : 2个字节<br>int：  2个字节<br>unsigned int : 2个字节<br>float:  4个字节<br>double:   8个字节<br>long:   4个字节<br>long long:  8个字节<br>unsigned long:  4个字节</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对于浮点数不宜使用-或-运算符&quot;&gt;&lt;a href=&quot;#对于浮点数不宜使用-或-运算符&quot; class=&quot;headerlink&quot; title=&quot;对于浮点数不宜使用 == 或 != 运算符&quot;&gt;&lt;/a&gt;对于浮点数不宜使用 == 或 != 运算符&lt;/h2&gt;&lt;p&gt;写作业时遇到了一个奇怪的bug，精简一下，代码大致如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;-5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = x + &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x == &lt;span class=&quot;number&quot;&gt;-4.9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Q&amp;A</title>
    <link href="http://wangyuyang.me/2018/05/20/Q&amp;A/"/>
    <id>http://wangyuyang.me/2018/05/20/Q&amp;A/</id>
    <published>2018-05-20T12:10:50.000Z</published>
    <updated>2018-05-31T14:53:08.844Z</updated>
    
    <content type="html"><![CDATA[<p>Q:如何使51单片机持续输出低/高电平？<br>A:51单片机上电复位后，所有未经人为操控的I/O口默认输出高电平。此外当一个端口在指令控制下输出低/高电平后，只要没有其他指令改变其输出电平，该端口将始终输出这一电平。<br><a id="more"></a><br>Q:<br>A:</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Q:如何使51单片机持续输出低/高电平？&lt;br&gt;A:51单片机上电复位后，所有未经人为操控的I/O口默认输出高电平。此外当一个端口在指令控制下输出低/高电平后，只要没有其他指令改变其输出电平，该端口将始终输出这一电平。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单片机软件延时函数分析</title>
    <link href="http://wangyuyang.me/2018/04/23/%E5%8D%95%E7%89%87%E6%9C%BA%E8%BD%AF%E4%BB%B6%E5%BB%B6%E6%97%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <id>http://wangyuyang.me/2018/04/23/单片机软件延时函数分析/</id>
    <published>2018-04-23T14:55:38.000Z</published>
    <updated>2018-05-15T04:18:13.854Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>初学89C51，在尝试控制LED灯闪烁间隔时长时，需要实现延时功能，查了一下相关资料，记下来作为笔记。</p></blockquote><h2 id="有哪些控制延时的方式？"><a href="#有哪些控制延时的方式？" class="headerlink" title="有哪些控制延时的方式？"></a>有哪些控制延时的方式？</h2><p>实现延时的方法主要有两类：</p><p><strong>硬件延时</strong>：主要是通过单片机内部的定时器来实现，精度较高，作为小白暂时略过。</p><p><strong>软件延时</strong>： 通过程序中的循环结构，不断重复一些无意义的指令以占用CPU运算资源，实现延时功能，实现起来较为简单，但精度较差。<br><a id="more"></a></p><hr><h2 id="利用C51实现软件延时"><a href="#利用C51实现软件延时" class="headerlink" title="利用C51实现软件延时"></a>利用C51实现软件延时</h2><p><strong>第一种方法</strong>，使用while循环<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(i--);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过调整在主调函数中赋予变量i的初始值（如50000），来控制时间间隔。</p><p><strong>第二种方法</strong>，使用for循环，多层嵌套<br><em>代码源于网络，延时1s</em><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay1s</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> h,i,j,k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(h=<span class="number">5</span>;h&gt;<span class="number">0</span>;h--)</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">4</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">116</span>;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">                <span class="keyword">for</span>(k=<span class="number">214</span>;k&gt;<span class="number">0</span>;k--);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注：需注意<code>char</code>型变量范围为0~255.</p><hr><h2 id="如何确定延时时间？"><a href="#如何确定延时时间？" class="headerlink" title="如何确定延时时间？"></a>如何确定延时时间？</h2><p>显然，上述两种程序的延时时长由循环次数决定，而循环次数又由<code>h, i, j, k</code>参数确定。但在循环次数和延时时长之间存在着怎样的一种关系？只有弄清楚这一问题，才能根据需要调整参数的值。</p><p>如果只是想实现简单的控制led灯闪烁，不作深入了解，只需按照以下方法计算即可：</p><p>设时钟频率为T，延时时长为t，那么单片机将一条简单的指令（如加减运算）执行一次所需的时长为12/T，设将这一命令重复执行N次即可达到目标，则n满足：</p><center><font size="5">N=tT/12</font></center><br>举个例子，假设单片机时钟频率为12Mhz，那么单片机执行一次加法或减法运算需要1μs，想要实现500ms的延时，只需重复执行5*10^5次，时长就大约为500ms。<br><br>下面将对原理进行更深一步的说明。<br><br>### 几个概念<br><br><strong>时钟周期</strong>：在MCS-51中亦称为振荡周期、晶振周期，是单片机中最基本的时间单位，周期长度等于为单片机提供时钟脉冲信号的震荡源的周期。<br>记时钟晶振的频率为<code>Fosc</code>,振荡周期为<code>Tosc</code>，则有关系式：<br><center><font size="5">Tosc=1/Fosc</font></center><p>这一关系式是显然的，因为频率与周期必互为倒数。</p><p>若开发板上晶振频率为12Mhz（10^6Hz），计算可得:</p><center><font size="5">Tosc=1/12μs=0.0833……μs</font></center><p><strong>状态周期</strong>：两个振荡周期组成一个状态周期（S周期）。对于<code>Fosc=12Mhz</code>的晶振，一个状态周期为0.166μs。</p><p><strong>机器周期</strong>：单片机完成一个独立的操作所用的时间被称为一个机器周期，一般记为<code>Tcy</code>。一个机器周期包含6个状态周期，即等于12个时钟周期，时间长度为1μs。<br><blockquote><p>*MCS-51里定义一个振荡周期为一个节拍（P）。如果记一个机器周期中的六个状态周期为<code>S1、S2、S3、S4、S5、S6</code>，每个状态周期对应的两个节拍为<code>P1、P2</code>，那么一个机器周期中的12个状态周期可以记作<code>S1P1 S1P2 S2P1 S2P2 S3P1 S3P2………S6P1 S6P2</code>。更详细的内容可参见[这里][1]<br><del>当然这些概念在这里并没有什么卵用hhh</del></p></blockquote></p><p><strong>指令周期</strong>：单片机完成一条独立的指令所用的时间被称为一个指令周期，而一个指令周期包含一个或多个机器周期。MCS-51中，有单周期指令，双周期指令和四周期指令。</p><p>假设有一条指令为A,单周期指令的意思是说，执行完指令A需要一个机器周期，即对于指令A而言，一个指令周期等于一个机器周期。</p><p>若A为双周期指令，则执行完指令A需要两个机器周期，即对于指令A而言，一个指令周期等于两个机器周期。四周期指令同理。</p><p>那么，有哪些指令是单/双/四周期指令？据我所知，大多数指令为单周期指令，只有乘除法运算为四周期指令，其他的都是双周期指令。至于如何更明确具体的判断一条指令是几周期指令的方法我还尚未研究。</p><blockquote><p>总结:&ensp;1个机器周期=6个状态周期=12个时钟周期<br>&emsp;&emsp;&emsp;1个指令周期=1/2/4个机器周期</p></blockquote><p>有了这些概念作为基础，上面所提到的计算循环次数的方法就不难理解了。回过头来看上面的例子（摘自<em>单片机原理与应用设计</em>一书第七十八页）：</p><p>设51单片机时钟频率为12Mhz，试实现约500ms的延时。</p><p>分析：时钟频率12Mhz，那么，一个机器周期为1μs，又因乘除之外的指令均为单周期指令或双周期指令，故执行一次指令用时1μs~2μs，延时500ms只需执行指令2.5~5*10^5次。</p><hr><p>参考资料:<br>  [1] 王欣飞，谢龙汉，谢锋然.单片机原理与应用设计[M].北京：清华大学出版社，2014.<br>  [2] <a href="https://www.wikipedia.org/" target="_blank" rel="noopener">Wikipedia</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;初学89C51，在尝试控制LED灯闪烁间隔时长时，需要实现延时功能，查了一下相关资料，记下来作为笔记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;有哪些控制延时的方式？&quot;&gt;&lt;a href=&quot;#有哪些控制延时的方式？&quot; class=&quot;headerlink&quot; title=&quot;有哪些控制延时的方式？&quot;&gt;&lt;/a&gt;有哪些控制延时的方式？&lt;/h2&gt;&lt;p&gt;实现延时的方法主要有两类：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;硬件延时&lt;/strong&gt;：主要是通过单片机内部的定时器来实现，精度较高，作为小白暂时略过。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软件延时&lt;/strong&gt;： 通过程序中的循环结构，不断重复一些无意义的指令以占用CPU运算资源，实现延时功能，实现起来较为简单，但精度较差。&lt;br&gt;
    
    </summary>
    
    
      <category term="51单片机" scheme="http://wangyuyang.me/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="嵌入式" scheme="http://wangyuyang.me/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>利用PN532模块复制门禁卡</title>
    <link href="http://wangyuyang.me/2018/04/06/%E5%88%A9%E7%94%A8PN532%E6%A8%A1%E5%9D%97%E5%A4%8D%E5%88%B6%E9%97%A8%E7%A6%81%E5%8D%A1/"/>
    <id>http://wangyuyang.me/2018/04/06/利用PN532模块复制门禁卡/</id>
    <published>2018-04-06T13:18:49.000Z</published>
    <updated>2018-04-07T23:52:50.857Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;小区又双叒叕升级门禁系统，每户只给免费发两张门禁卡.额外购卡的话，每张卡居然收10元RMB.成本几毛钱的东西收这个价感觉略坑，查了一下资料决定自己动手复制一张卡.<del> 实际上最后算下来，钱花的更多了23333. </del></p><p>&emsp;&emsp;先了解一下非接触式智能卡（Contactless smart card）的基本知识：由ISO/IEC JTC 1颁布的ISO/ICE 14443协议定义了两种非接触卡（A型和B型）的技术标准，具体的技术细节不再赘述.概括一下过程就是非接触卡（PICC）接受由非接触读写器（PCD）传输的数据和能量，同时对数据进行解码和处理，然后PICC再将处理过的数据反馈给PCD.</p><p>&emsp;&emsp;基于ISO/IEC 14443标准中对Type A 13.56 MHz型智能卡的规定，1994年，NXP公司推出了MIFARE（名称源于MIkron FARE Collection System）系列智能卡的第一款产品： MIFARE Classic 1K（简称M1卡）. MIFARE Classic 1K 是目前最常见的一种非接触卡，每张卡具有一个独一无二且不可修改的UID编号，绝大多数门禁卡、学生卡、水卡等都是这种卡.这种卡也是被将要我复制的卡.<br><a id="more"></a><br>&emsp;&emsp;MIFARE系列还有其他产品，如MIFARE Ultralight,MIFARE Plus和MIFARE DESFire.这四类卡又有其他不同的分支，这里亦不在谈，<a href="https://en.wikipedia.org/wiki/MIFARE" target="_blank" rel="noopener">戳这里</a>可以进一步了解MIFARE卡的历史和种类.不过值得一提的是，MIFARE Ultralight和MIFARE DESFire被用于我国部分城市的交通卡中，任何尝试修改、复制交通卡内数据的行为都是触犯我国法律的。</p><p>&emsp;&emsp;2007年12月，MIFARE Classic被证实存在设计缺陷，可以被多种方式破解，正是这一原因使得我们可以在没有Key A,B的情况下完成卡的复制。</p><blockquote><p>这里描述的是复制非全加密的M1卡.全加密的M1卡需要使用Proxmark 3进行嗅探，成本较高，大概需要300+RMB，这里不做讨论（有说法称PN532亦可破解全加密卡，具体情况不详）.</p></blockquote><p>&emsp;&emsp;复制所需的工具：<br>&emsp;&emsp;&emsp;&emsp;PN532模块<br>&emsp;&emsp;&emsp;&emsp;PL2303 USB to Serial<br>&emsp;&emsp;&emsp;&emsp;CUID卡一张<br>&emsp;&emsp;成本大概30￥，其中一张CUID卡的价格大概在1￥左右.</p><blockquote><p>PN532可用ACR112U代替，但ACR112U价格较高(100+RMB).<br> CUID卡是UID卡（Chinese Magic Card,可修改一次UID编号）的变种，出厂时空白，可以重复、随意擦写卡中数据（包括0扇区的UID编号）.</p></blockquote><p>&emsp;&emsp;工具凑齐后需要将PL2303和PN532模块连接起来，连接时要注意线序：<br> PN532*&nbsp;&nbsp;&nbsp;&nbsp;PL2303<br>  GND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GND<br>  VCC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+5V<br>  TXD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RXD<br>  RXD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TXD</p><blockquote><p>*背面印刷有引脚说明，若不慎将GND和VCC反接会导致模块烧毁.</p></blockquote><p>&emsp;&emsp;连接完成后，将PL2303插入电脑，安装相应的驱动后即可利用上位机读取卡片中的信息，将读取的数据导出为”.dump”文件，再写入CUID卡中即可完成复制.拿到门禁上一试，成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;小区又双叒叕升级门禁系统，每户只给免费发两张门禁卡.额外购卡的话，每张卡居然收10元RMB.成本几毛钱的东西收这个价感觉略坑，查了一下资料决定自己动手复制一张卡.&lt;del&gt; 实际上最后算下来，钱花的更多了23333. &lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;先了解一下非接触式智能卡（Contactless smart card）的基本知识：由ISO/IEC JTC 1颁布的ISO/ICE 14443协议定义了两种非接触卡（A型和B型）的技术标准，具体的技术细节不再赘述.概括一下过程就是非接触卡（PICC）接受由非接触读写器（PCD）传输的数据和能量，同时对数据进行解码和处理，然后PICC再将处理过的数据反馈给PCD.&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;基于ISO/IEC 14443标准中对Type A 13.56 MHz型智能卡的规定，1994年，NXP公司推出了MIFARE（名称源于MIkron FARE Collection System）系列智能卡的第一款产品： MIFARE Classic 1K（简称M1卡）. MIFARE Classic 1K 是目前最常见的一种非接触卡，每张卡具有一个独一无二且不可修改的UID编号，绝大多数门禁卡、学生卡、水卡等都是这种卡.这种卡也是被将要我复制的卡.&lt;br&gt;
    
    </summary>
    
    
      <category term="RFID" scheme="http://wangyuyang.me/tags/RFID/"/>
    
  </entry>
  
  <entry>
    <title>对基于HEXO的NexT主题的美化</title>
    <link href="http://wangyuyang.me/2018/04/06/%E5%AF%B9%E5%9F%BA%E4%BA%8EHEXO%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E7%9A%84%E7%BE%8E%E5%8C%96/"/>
    <id>http://wangyuyang.me/2018/04/06/对基于HEXO的NexT主题的美化/</id>
    <published>2018-04-06T09:12:38.000Z</published>
    <updated>2018-06-05T02:33:52.115Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">目录</span><br><span class="line">1.给博客增加一个萌萌哒看板娘</span><br><span class="line">2.修改页脚处，年份与姓名间的图标</span><br><span class="line">3.增加访客统计功能</span><br><span class="line">4.Back-to-top 按钮显示百分比</span><br><span class="line">5.如何设置「阅读全文」？</span><br><span class="line">6.将文章底部标签前的&quot;#&quot;替换为标签图标</span><br><span class="line">7.修改字体及字体大小</span><br><span class="line">8.在Markdown中写注释</span><br></pre></td></tr></table></figure><p>刚开始接触HEXO，这几天在一些大佬的博客和官方文档里学到了不少个性化设置。故记录于此，以备以后查阅。<br><blockquote><p>Tip：如果发现修改后页面部分内容未正常显示，先试试<code>$ hexo clean</code>,再进行生成和部署</p></blockquote></p><hr><h2 id="给博客增加一个萌萌哒看板娘"><a href="#给博客增加一个萌萌哒看板娘" class="headerlink" title="给博客增加一个萌萌哒看板娘"></a>给博客增加一个萌萌哒看板娘</h2><blockquote><p>*经测试该插件在IE及Microsoft Edge上会引起不同程度的卡顿，建议使用Chrome浏览</p></blockquote><p>Github项目地址：<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">戳这里</a></p><p>在根目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p><p>然后<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">在这里</a>可以看到一些已有的模型，记下想要的模型名字,使用安装命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install <span class="string">"模型的包名"</span></span><br></pre></td></tr></table></figure></p><a id="more"></a> <p>模型的包名：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure></p><p>以koharu为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install live2d-widget-model-koharu</span><br></pre></td></tr></table></figure></p><p>安装完成后，还需要在一些小小的修改<br>在<code>_config.yml</code>（HEXO或主题的<code>_config.yml</code>皆可）中，加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">     enable: true</span><br><span class="line">     scriptFrom: local</span><br><span class="line">     pluginRootPath: live2dw/</span><br><span class="line">     pluginJsPath: lib/</span><br><span class="line">     pluginModelPath: assets/</span><br><span class="line">     model:</span><br><span class="line">       use: live2d-widget-model-koharu</span><br><span class="line">     display:</span><br><span class="line">       position: right</span><br><span class="line">       width: 150</span><br><span class="line">       height: 300</span><br><span class="line">     mobile:</span><br><span class="line">       show: true</span><br></pre></td></tr></table></figure></p><p>根据需要可修改<code>use:</code>后的包名；调整长度和宽度；选择是否停用插件等。</p><hr><h2 id="修改页脚处，年份与姓名间的图标"><a href="#修改页脚处，年份与姓名间的图标" class="headerlink" title="修改页脚处，年份与姓名间的图标"></a>修改页脚处，年份与姓名间的图标</h2><p>NexT主题默认图标为一个人像（user），可以将其改为心形图案。</p><p>先打开文件 <code>~/blog/themes/next/_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">icon:</span><br><span class="line">    # Icon name in fontawesome, see: https://fontawesome.com/v4.7.0/icons</span><br><span class="line">    # `heart` is recommended with animation in red (#ff0000).</span><br><span class="line">    name: user</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">    # Change the color of icon, using Hex Code.</span><br><span class="line">    color: &quot;#808080&quot;</span><br></pre></td></tr></table></figure></p><p>将第4行中的user替换为heart，注意不要删去分号后的空格。</p><p>然后打开文件 <code>~/blog/themes/next/layout/_partials</code></p><p>找到<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"with-love"</span> id=<span class="string">"animation"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"with-love"</span> id=<span class="string">"heart"</span>&gt;</span><br></pre></td></tr></table></figure></p><hr><h2 id="增加访客统计功能"><a href="#增加访客统计功能" class="headerlink" title="增加访客统计功能"></a>增加访客统计功能</h2><blockquote><p>在用这种方法添加访客统计功能之后，才发现NexT已经已经内置了该脚本Orz<br>  <del>再去删改是不可能的，这辈子都不可能再改的，毕竟太懒</del><br>  方法附在后面。</p></blockquote><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">戳这里</a>进入作者的网站。</p><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>打开<code>~/blog/themes/next/layout/_partials/footer.swig</code></p><p>在<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"copyright"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>前插入一段代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>然后滚动到文件最后（或者其他合适的地方），插入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"busuanzi-count"</span>&gt;</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-user-md"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    您是第<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>位客人呢| ω・´)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>如果不想要提示前的图标，直接删去<code>&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;</code>即可。</p><p>在这里有两种不同的统计方式：</p><p>pv的方式，按点击数来记录，即单个用户连续点击n篇文章，记录n次访问量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span><br><span class="line">    本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>次</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure></p><p>uv的方式，按用户数记录，即单个用户连续点击n篇文章，只记为1次访问量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span><br><span class="line">    本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_uv"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>次</span><br><span class="line">&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure></p><p>该部分参考了<a href="https://segmentfault.com/a/1190000009544924#articleHeader12" target="_blank" rel="noopener">这篇文章</a>的第十三条。</p><h3 id="另一种方法"><a href="#另一种方法" class="headerlink" title="另一种方法"></a>另一种方法</h3><p>只需要在主题配置文件<code>_config.yml</code>中找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Show Views/Visitors of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: false</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure></p><p>按需修改即可。</p><hr><h2 id="Back-to-top-按钮显示百分比"><a href="#Back-to-top-按钮显示百分比" class="headerlink" title="Back-to-top 按钮显示百分比"></a>Back-to-top 按钮显示百分比</h2><p>打开文件 <code>~/blog/themes/next/_config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: false</span><br></pre></td></tr></table></figure></p><p>将<code>scrollpercen:</code>的值改为<code>true</code>即可。</p><hr><h2 id="如何设置「阅读全文」？"><a href="#如何设置「阅读全文」？" class="headerlink" title="如何设置「阅读全文」？"></a>如何设置「阅读全文」？</h2><p>在首页显示全文无疑是严重影响阅读体验的，只显示文章部分内容，再由读者决定是否跳转是一种常见的需求。根据官方文档，有三种方法来达成这一目的，这里只记录一种方法：<br>手动在文章中合适位置添加<code>&lt;!-- more --&gt;</code>进行截断。<br>其他方法可以<a href="https://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">戳这里</a></p><hr><h2 id="将文章底部标签前的”-”替换为标签图标"><a href="#将文章底部标签前的”-”替换为标签图标" class="headerlink" title="将文章底部标签前的”#”替换为标签图标"></a>将文章底部标签前的”#”替换为标签图标</h2><p>打开文件<code>~/blog/themes/next/layout/_macro/post.swig</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-footer"</span>&gt;</span><br><span class="line">      &#123;% <span class="keyword">if</span> post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-tags"</span>&gt;</span><br><span class="line">          &#123;% <span class="keyword">for</span> tag <span class="keyword">in</span> post.tags %&#125;</span><br><span class="line">            &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure></p><p>将第五行<code>rel=&quot;tag&quot;&gt;#</code>中的<code>#</code>替换为<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>即可。</p><hr><h2 id="修改字体及字体大小"><a href="#修改字体及字体大小" class="headerlink" title="修改字体及字体大小"></a>修改字体及字体大小</h2><h3 id="第一种方法-修改主题配置文件"><a href="#第一种方法-修改主题配置文件" class="headerlink" title="第一种方法 修改主题配置文件"></a>第一种方法 修改主题配置文件</h3><p>打开文件 <code>~/blog/themes/next/_config.yml</code><br>找到 <code>Font Settings</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Font Settings</span></span><br><span class="line">font:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default).---字体库外链地址</span></span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.---控制是否使用外链字体库，'true'表明使用</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.---指font-family属性？</span></span><br><span class="line">  <span class="comment"># `size: xx`. Use `px` as unit.---使用'px'作为单位，默认全局14px，我改为16px</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements in &lt;body&gt;.---全局字体</span></span><br><span class="line">  global:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family: Lato</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Headlines (H1, H2, H3, H4, H5, H6).---标题字体</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.---应当指的是用全局字体作为备用字体。参见知乎问题：字体话题中说的 fallback 具体是什么意思？ https://www.zhihu.com/question/21847989/answer/22547275</span></span><br><span class="line">  headings:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts.---文章字体</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line">  posts:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for Logo.---Logo字体</span></span><br><span class="line">  <span class="comment"># Fallback to `global` font settings.</span></span><br><span class="line">  logo:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.---代码块及&lt;code&gt;字体</span></span><br><span class="line">  codes:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family:</span><br><span class="line">    size:</span><br></pre></td></tr></table></figure></p><h3 id="第二种方法-直接修改CSS文件中源码"><a href="#第二种方法-直接修改CSS文件中源码" class="headerlink" title="第二种方法 直接修改CSS文件中源码"></a>第二种方法 直接修改CSS文件中源码</h3><p>打开文件 <code>~blog/themes/next/source/css/_variables/base.styl</code><br>找到<code>Font size</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = 14px</span><br><span class="line">$font-size-base           = unit(hexo-config('font.global.size'), px) if hexo-config('font.global.size') is a 'unit'</span><br><span class="line">$font-size-small          = $font-size-base - 2px</span><br><span class="line">$font-size-smaller        = $font-size-base - 4px</span><br><span class="line">$font-size-large          = $font-size-base + 2px</span><br><span class="line">$font-size-larger         = $font-size-base + 4px</span><br></pre></td></tr></table></figure></p><p>直接修改<code>14px</code>即可，<code>base.styl</code>中还有对字体等内容更详细的设置。</p><p>但是，不建议使用这种直接修改源码的方式进行调整，原因很简单，直接修改源码后，以后会因为不知道初始设置而难以调整。此外，也难以区分设置是否被修改过，从而无法选择性备份自己修改过的设置，在升级。对此的解决方法是，在与<code>_variables</code>同目录处有一个<code>_custom</code>文件夹，文件夹内有一个名为<code>cumtom.styl</code>的空文件，在这个空文件中将需要修改的代码粘贴过去，改成需要的值并保存即可。</p><p>为什么可以这样做？<br>这一切似乎是在<code>~/css/main.styl</code>中规定的，由于作为小白尚未系统学习过css语法，只能根据实际情况推测：大概是因为<code>custom.styl</code>中的配置比<code>~/_variables</code> <code>~/_mixins</code>等文件夹内文件优先级要高，当<code>custom.styl</code>与<code>base.styl</code>中设置不同时，优先采用前者的设置，后者则会被覆盖。</p><p>下面将举例说明如何修改<code>custom.styl</code>文件。</p><h3 id="第三种方法-修改custom-styl"><a href="#第三种方法-修改custom-styl" class="headerlink" title="第三种方法 修改custom.styl"></a>第三种方法 修改custom.styl</h3><p>假设想要修改字体大小及字体族。<br>第一步，打开文件 <code>~blog/themes/next/source/css/_custom/custom.styl</code>和<code>~blog/themes/next/source/css/_variables/base.styl</code></p><p>先在<code>base.styl</code>中找到<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ font-size-base  =</span><br><span class="line">$ font-family-base  =</span><br></pre></td></tr></table></figure></p><p>在<code>custom.styl</code>中添加：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ font-size-base  =  14 px ; //默认是14px大小</span><br><span class="line">$ font-family-base  =  “Microsoft YaHei”，Verdana，sans-serif  //修改成你期望的字体族</span><br></pre></td></tr></table></figure></p><p>即完成了修改。</p><div style="display: none"><br>待更,，暂时隐藏掉。<br>另外，在<code>~/_variables</code> <code>~/_mixins</code>其实也各有一个名为<code>custom.styl</code>的空文件，在这些文件中加入你自己要修改的设置中也能起到相同的作用。自然的就会产生疑问：哪一个文件中的设置会被优先使用？为了弄明白这一问题，我做了一下测试：<br>在<code>~css/_variables/base.styl</code>中，将字体大小改为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base           = 14px</span><br></pre></td></tr></table></figure><br><br>在<code>css/_variables/custom.styl</code>中，将字体大小改为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base           = 20px</span><br></pre></td></tr></table></figure><br><br>在<code>~css/_custom/custom.styl</code>中，将字体大小改为：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base           = 25px</span><br></pre></td></tr></table></figure><br><br>在主题配置文件<code>~/blog/themes/next/_config.yml</code>中，将字体大小改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  global:</span><br><span class="line">    external: <span class="literal">true</span></span><br><span class="line">    family: Lato</span><br><span class="line">    size:30</span><br><span class="line"></span><br><span class="line">最后显示的字体大小为：</span><br></pre></td></tr></table></figure><br><br></div><hr><h2 id="在Markdown中写注释"><a href="#在Markdown中写注释" class="headerlink" title="在Markdown中写注释"></a>在Markdown中写注释</h2><p>可参考<a href="https://www.imooc.com/article/23400" target="_blank" rel="noopener">这篇文章</a></p><hr><p>一些常用的资料：</p><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">HEXO官方文档</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a><br><a href="http://nipponcolors.com/" target="_blank" rel="noopener">日本の伝統色</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.给博客增加一个萌萌哒看板娘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.修改页脚处，年份与姓名间的图标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.增加访客统计功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4.Back-to-top 按钮显示百分比&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5.如何设置「阅读全文」？&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6.将文章底部标签前的&amp;quot;#&amp;quot;替换为标签图标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7.修改字体及字体大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8.在Markdown中写注释&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;刚开始接触HEXO，这几天在一些大佬的博客和官方文档里学到了不少个性化设置。故记录于此，以备以后查阅。&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;Tip：如果发现修改后页面部分内容未正常显示，先试试&lt;code&gt;$ hexo clean&lt;/code&gt;,再进行生成和部署&lt;/p&gt;
&lt;/blockquote&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;给博客增加一个萌萌哒看板娘&quot;&gt;&lt;a href=&quot;#给博客增加一个萌萌哒看板娘&quot; class=&quot;headerlink&quot; title=&quot;给博客增加一个萌萌哒看板娘&quot;&gt;&lt;/a&gt;给博客增加一个萌萌哒看板娘&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;*经测试该插件在IE及Microsoft Edge上会引起不同程度的卡顿，建议使用Chrome浏览&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Github项目地址：&lt;a href=&quot;https://github.com/EYHN/hexo-helper-live2d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;戳这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在根目录下执行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save hexo-helper-live2d&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后&lt;a href=&quot;https://huaji8.top/post/live2d-plugin-2.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在这里&lt;/a&gt;可以看到一些已有的模型，记下想要的模型名字,使用安装命令：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install &lt;span class=&quot;string&quot;&gt;&quot;模型的包名&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="HEXO" scheme="http://wangyuyang.me/tags/HEXO/"/>
    
      <category term="NexT" scheme="http://wangyuyang.me/tags/NexT/"/>
    
  </entry>
  
</feed>
